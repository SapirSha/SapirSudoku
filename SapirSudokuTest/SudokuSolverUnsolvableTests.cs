using SapirSudoku.src;

namespace SapirSudokuTest;

[TestClass]
public sealed class SudokuSolverUnsolvableTests
{
    [TestMethod]
    public void Should_NotReturnAnswer_When_GotA9X9ValidUnsolvableSudoku1()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {0,0,0, 0,0,5, 0,8,0,},
                {0,0,0, 6,0,1, 0,4,3,},
                {0,0,0, 0,0,0, 0,0,0,},

                {0,1,0, 5,0,0, 0,0,0,},
                {0,0,0, 1,0,6, 0,0,0,},
                {3,0,0, 0,0,0, 0,0,5,},

                {5,3,0, 0,0,0, 0,6,1,},
                {0,0,0, 0,0,0, 0,0,4,},
                {0,0,0, 0,0,0, 0,0,0,},
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }

    [TestMethod]
    public void Should_NotReturnAnswer_When_GotA9X9ValidUnsolvableSudoku2()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {0,0,0, 0,3,0, 0,0,0,},
                {0,6,0, 0,0,0, 4,0,0,},
                {0,0,7, 0,5,0, 8,0,0,},

                {0,0,0, 4,0,6, 0,0,0,},
                {0,0,0, 9,0,0, 0,0,0,},
                {0,5,0, 0,1,0, 3,0,0,},

                {4,0,0, 0,0,0, 0,2,0,},
                {0,0,0, 3,0,0, 0,0,0,},
                {0,0,0, 0,0,0, 0,0,0,},
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }

    [TestMethod]
    public void Should_NotReturnAnswer_When_GotA9X9ValidUnsolvableSudoku3()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {2,0,0, 9,0,0, 0,0,0,},
                {0,0,0, 0,0,0, 0,6,0,},
                {0,0,0, 0,0,1, 0,0,0,},

                {5,0,2, 6,0,0, 4,0,7,},
                {0,0,0, 0,0,4, 1,0,0,},
                {0,0,0, 0,9,8, 0,2,3,},

                {0,0,0, 0,0,3, 0,8,0,},
                {0,0,5, 0,1,0, 0,0,0,},
                {0,0,7, 0,0,0, 0,0,0,},
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }

    [TestMethod]
    public void Should_NotReturnAnswer_When_GotA9X9ValidUnsolvableSudoku4()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {0,0,0, 0,9,8, 0,0,0,},
                {0,3,0, 0,0,2, 0,9,0,},
                {0,0,9, 0,0,0, 0,0,8,},

                {0,9,0, 0,0,0, 0,7,0,},
                {0,0,0, 3,0,0, 0,0,9,},
                {0,0,0, 0,0,9, 8,0,0,},

                {8,0,0, 0,0,0, 0,3,0,},
                {0,0,0, 9,0,0, 0,0,0,},
                {0,0,0, 0,0,0, 9,0,0,}
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }

    [TestMethod]
    public void Should_NotReturnAnswer_When_GotA16X16ValidUnsolvableSudoku1()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {14,0 ,0 ,0 ,15, 0 ,0 ,0 ,11,0 , 0 ,13,2 ,0 ,0 , 0 ,0 ,16,0 ,0 , 0 ,0 ,9 ,0 ,7 ,},
                {0 ,0 ,10,0 ,3 , 0 ,0 ,0 ,0 ,0 , 11,0 ,8 ,0 ,0 , 0 ,0 ,0 ,9 ,0 , 15,0 ,0 ,6 ,0 ,},
                {0 ,0 ,0 ,13,11, 0 ,0 ,0 ,0 ,0 , 0 ,0 ,12,9 ,0 , 14,4 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,3 ,},
                {0 ,0 ,0 ,0 ,0 , 8 ,2 ,0 ,0 ,0 , 4 ,12,0 ,0 ,7 , 0 ,0 ,0 ,0 ,0 , 5 ,11,0 ,0 ,0 ,},
                {16,0 ,0 ,2 ,0 , 14,4 ,0 ,0 ,0 , 0 ,10,7 ,0 ,0 , 0 ,0 ,5 ,13,0 , 8 ,0 ,0 ,0 ,9 ,},

                {0 ,0 ,0 ,0 ,7 , 0 ,15,0 ,0 ,5 , 0 ,0 ,8 ,2 ,0 , 12,0 ,0 ,0 ,0 , 9 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,13,0 , 0 ,0 ,8 ,0 ,0 , 0 ,0 ,2 ,0 ,9 , 14,4 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,11,},
                {0 ,0 ,11,0 ,0 , 2 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,7 , 0 ,0 ,16,0 ,0 , 2 ,12,0 ,0 ,0 ,},
                {0 ,15,0 ,0 ,0 , 0 ,13,0 ,5 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,4 ,0 ,9 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,6 ,0 ,0 , 3 ,5 ,0 ,1 ,8 , 2 ,0 ,0 ,0 ,14, 0 ,0 ,0 ,0 ,10, 7 ,0 ,0 ,0 ,0 ,},

                {0 ,11,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},

                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},

                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,1 ,8 ,0 ,},
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }

    [TestMethod]
    public void Should_NotReturnAnswer_When_GotA16X16ValidUnsolvableSudoku2()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {11,0 ,15,0 , 13,14,0 ,1 , 0 ,6 ,9 ,0 , 0 ,0 ,0 ,0 ,},
                {0 ,0 ,7 ,1 , 0 ,0 ,0 ,0 , 5 ,0 ,0 ,10, 15,0 ,11,4 ,},
                {0 ,0 ,0 ,0 , 0 ,0 ,12,0 , 4 ,0 ,0 ,0 , 7 ,0 ,13,0 ,},
                {0 ,5 ,12,3 , 0 ,0 ,0 ,8 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},

                {5 ,0 ,0 ,16, 0 ,0 ,0 ,10, 15,8 ,0 ,14, 1 ,0 ,0 ,0 ,},
                {4 ,12,3 ,0 , 14,15,8 ,11, 0 ,0 ,13,2 , 0 ,0 ,0 ,0 ,},
                {14,15,8 ,11, 2 ,7 ,0 ,0 , 6 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 , 0 ,0 ,9 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,15,},

                {0 ,0 ,0 ,0 , 15,0 ,0 ,0 , 0 ,0 ,14,0 , 13,0 ,0 ,0 ,},
                {15,3 ,10,0 , 0 ,0 ,0 ,14, 0 ,0 ,2 ,6 , 0 ,0 ,0 ,0 ,},
                {0 ,0 ,11,14, 6 ,1 ,0 ,2 , 9 ,16,0 ,12, 0 ,0 ,0 ,0 ,},
                {0 ,1 ,0 ,0 , 12,0 ,16,0 , 0 ,10,4 ,0 , 0 ,0 ,0 ,8 ,},

                {0 ,0 ,5 ,0 , 0 ,10,0 ,15, 11,14,0 ,1 , 2 ,6 ,0 ,0 ,},
                {8 ,0 ,0 ,15, 0 ,11,0 ,0 , 0 ,0 ,0 ,9 , 0 ,12,0 ,16,},
                {0 ,11,0 ,7 , 0 ,0 ,0 ,0 , 0 ,5 ,12,0 , 0 ,15,8 ,10,},
                {0 ,0 ,0 ,0 , 3 ,0 ,5 ,0 , 10,4 ,0 ,8 , 0 ,7 ,0 ,9 ,},
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }

    public void Should_NotReturnAnswer_When_GotA16X16ValidUnsolvableSudoku3()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {0 ,0 ,0 ,0 , 10,13,0 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,15,},
                {7 ,0 ,0 ,5 , 0 ,11,0 ,1 , 10,0 ,0 ,16, 9 ,0 ,12,8 ,},
                {9 ,0 ,0 ,8 , 0 ,0 ,7 ,0 , 0 ,0 ,0 ,4 , 6 ,0 ,0 ,13,},
                {6 ,0 ,10,13, 0 ,8 ,0 ,0 , 0 ,0 ,0 ,7 , 0 ,0 ,0 ,2 ,},

                {13,0 ,0 ,0 , 3 ,0 ,8 ,9 , 0 ,14,15,5 , 0 ,0 ,0 ,1 ,},
                {2 ,11,0 ,1 , 16,10,0 ,0 , 0 ,0 ,0 ,8 , 0 ,0 ,7 ,14,},
                {0 ,0 ,0 ,0 , 1 ,0 ,0 ,0 , 16,0 ,0 ,0 , 0 ,9 ,0 ,0 ,},
                {0 ,0 ,0 ,12, 14,15,0 ,7 , 4 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},

                {0 ,0 ,6 ,16, 9 ,0 ,0 ,0 , 0 ,0 ,14,0 , 1 ,0 ,0 ,0 ,},
                {0 ,2 ,11,0 , 6 ,0 ,0 ,13, 8 ,0 ,0 ,12, 0 ,0 ,5 ,0 ,},
                {0 ,0 ,7 ,0 , 0 ,0 ,2 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},
                {12,0 ,9 ,0 , 0 ,14,15,5 , 11,4 ,0 ,2 , 0 ,13,0 ,16,},

                {0 ,0 ,2 ,0 , 13,0 ,16,0 , 12,0 ,9 ,0 , 7 ,0 ,0 ,0 ,},
                {14,15,5 ,0 , 0 ,4 ,0 ,0 , 13,6 ,0 ,0 , 0 ,12,8 ,0 ,},
                {3 ,12,0 ,0 , 0 ,0 ,0 ,0 , 2 ,0 ,0 ,1 , 16,10,0 ,0 ,},
                {0 ,0 ,13,6 , 8 ,0 ,0 ,0 , 15,0 ,0 ,0 , 4 ,0 ,2 ,3 ,},
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }


    [TestMethod]
    public void Should_NotReturnAnswer_When_GotA25X25ValidUnsolvableSudoku1()
    {
        Sudoku unsolvableSudoku = new Sudoku(
            new int[,]
            {
                {14,0 ,0 ,0 ,15, 0 ,0 ,0 ,11,0 , 0 ,13,2 ,0 ,0 , 0 ,0 ,16,0 ,0 , 0 ,0 ,9 ,0 ,7 ,},
                {0 ,0 ,10,0 ,3 , 0 ,0 ,0 ,0 ,0 , 11,0 ,8 ,0 ,0 , 0 ,0 ,0 ,9 ,0 , 15,0 ,0 ,6 ,0 ,},
                {0 ,0 ,0 ,13,11, 0 ,0 ,0 ,0 ,0 , 0 ,0 ,12,9 ,0 , 14,4 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,3 ,},
                {0 ,0 ,0 ,0 ,0 , 8 ,2 ,0 ,0 ,0 , 4 ,12,0 ,0 ,7 , 0 ,0 ,0 ,0 ,0 , 5 ,11,0 ,0 ,0 ,},
                {16,0 ,0 ,2 ,0 , 14,4 ,0 ,0 ,0 , 0 ,10,7 ,0 ,0 , 0 ,0 ,5 ,13,0 , 8 ,0 ,0 ,0 ,9 ,},

                {0 ,0 ,0 ,0 ,7 , 0 ,15,0 ,0 ,5 , 0 ,0 ,8 ,2 ,0 , 12,0 ,0 ,0 ,0 , 9 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,13,0 , 0 ,0 ,8 ,0 ,0 , 0 ,0 ,2 ,0 ,9 , 14,4 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,11,},
                {0 ,0 ,11,0 ,0 , 2 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,7 , 0 ,0 ,16,0 ,0 , 2 ,12,0 ,0 ,0 ,},
                {0 ,15,0 ,0 ,0 , 0 ,13,0 ,5 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,4 ,0 ,9 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,6 ,0 ,0 , 3 ,5 ,0 ,1 ,8 , 2 ,0 ,0 ,0 ,14, 0 ,0 ,0 ,0 ,10, 7 ,0 ,0 ,0 ,0 ,},

                {0 ,11,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},

                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},

                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,1 ,8 ,0 ,},
            }
            );
        Assert.IsTrue(unsolvableSudoku.Answers.Count() == 0);
    }
}
