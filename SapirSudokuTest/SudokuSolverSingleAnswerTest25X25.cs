using SapirSudoku.src;

namespace SapirSudokuTest;

[TestClass]
public sealed class SudokuSolverSingleAnswerTest25X25
{
    [TestMethod]
    public void Should_SolveSudoku_When_GotA25X25ValidSudoku1()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {0 ,21,4 ,8 ,7 , 10,0 ,0 ,9 ,2 , 0 ,0 ,25,3 ,0 , 0 ,0 ,0 ,0 ,13, 12,11,0 ,15,0 ,},
                {0 ,9 ,0 ,10,5 , 0 ,14,0 ,0 ,23, 13,1 ,18,0 ,0 , 11,6 ,0 ,17,12, 8 ,7 ,22,21,0 ,},
                {0 ,3 ,0 ,0 ,0 , 13,1 ,18,19,0 , 0 ,11,0 ,15,0 , 7 ,0 ,0 ,0 ,8 , 10,5 ,16,9 ,2 ,},
                {0 ,0 ,20,13,1 , 12,0 ,0 ,15,0 , 8 ,0 ,22,21,4 , 5 ,0 ,9 ,2 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {6 ,15,17,0 ,11, 8 ,0 ,22,21,4 , 0 ,0 ,0 ,9 ,2 , 14,25,0 ,23,0 , 0 ,1 ,0 ,19,0 ,},

                {21,4 ,8 ,7 ,0 , 5 ,25,0 ,0 ,0 , 0 ,0 ,3 ,23,0 , 0 ,0 ,0 ,0 ,1 , 0 ,0 ,15,0 ,12,},
                {9 ,0 ,10,0 ,25, 14,18,3 ,0 ,24, 1 ,0 ,19,0 ,0 , 22,0 ,0 ,12,11, 0 ,0 ,21,4 ,0 ,},
                {0 ,0 ,24,14,18, 1 ,0 ,0 ,0 ,13, 0 ,0 ,0 ,0 ,12, 16,21,4 ,0 ,7 , 5 ,25,9 ,2 ,10,},
                {19,20,13,0 ,6 , 0 ,22,15,17,0 , 7 ,16,21,4 ,0 , 25,0 ,0 ,10,5 , 0 ,18,3 ,0 ,24,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,25,0 ,2 ,10, 18,0 ,23,24,14, 1 ,0 ,0 ,0 ,0 ,},

                {20,13,0 ,0 ,0 , 0 ,0 ,17,0 ,0 , 16,9 ,4 ,0 ,7 , 0 ,0 ,0 ,0 ,25, 0 ,0 ,23,24,14,},
                {17,0 ,0 ,22,21, 0 ,0 ,4 ,8 ,7 , 0 ,3 ,0 ,10,5 , 19,0 ,24,0 ,0 , 6 ,0 ,0 ,13,0 ,},
                {0 ,0 ,0 ,0 ,9 , 0 ,3 ,0 ,10,0 , 0 ,19,0 ,0 ,0 , 15,0 ,0 ,0 ,6 , 0 ,0 ,0 ,12,11,},
                {2 ,10,5 ,25,0 , 18,0 ,0 ,0 ,14, 6 ,15,0 ,13,1 , 21,17,12,11,0 , 16,9 ,0 ,0 ,0 ,},
                {23,0 ,14,18,0 , 6 ,0 ,20,0 ,1 , 22,21,17,12,11, 9 ,4 ,8 ,7 ,0 , 0 ,0 ,2 ,10,0 ,},

                {10,5 ,0 ,0 ,0 , 19,20,0 ,0 ,18, 15,17,13,0 ,0 , 4 ,12,0 ,22,0 , 9 ,2 ,8 ,7 ,0 ,},
                {24,0 ,18,19,0 , 0 ,17,0 ,1 ,0 , 0 ,4 ,0 ,11,0 , 2 ,8 ,0 ,0 ,9 , 3 ,0 ,10,5 ,0 ,},
                {13,1 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,2 ,0 ,0 ,16, 0 ,10,0 ,25,3 , 19,20,24,14,0 ,},
                {0 ,0 ,22,21,4 , 0 ,0 ,8 ,7 ,0 , 3 ,0 ,10,0 ,0 , 0 ,0 ,0 ,0 ,19, 0 ,17,13,1 ,0 ,},
                {8 ,7 ,0 ,9 ,2 , 3 ,0 ,10,0 ,25, 19,0 ,0 ,14,18, 17,13,0 ,6 ,0 , 0 ,0 ,12,0 ,0 ,},

                {7 ,0 ,9 ,0 ,10, 23,24,5 ,25,0 , 20,0 ,14,18,0 , 0 ,1 ,6 ,0 ,17, 0 ,8 ,11,22,0 ,},
                {5 ,25,0 ,0 ,24, 0 ,0 ,14,0 ,0 , 17,0 ,0 ,6 ,0 , 8 ,0 ,22,21,0 , 0 ,10,0 ,0 ,0 ,},
                {14,0 ,0 ,0 ,13, 17,0 ,0 ,0 ,0 , 4 ,8 ,11,0 ,21, 0 ,0 ,0 ,0 ,2 , 23,0 ,0 ,0 ,0 ,},
                {0 ,6 ,15,17,0 , 0 ,0 ,11,22,21, 2 ,10,7 ,16,9 , 0 ,5 ,25,3 ,23, 0 ,0 ,0 ,0 ,0 ,},
                {0 ,22,21,4 ,0 , 2 ,10,0 ,16,9 , 0 ,24,0 ,0 ,3 , 0 ,0 ,0 ,19,20, 17,12,1 ,0 ,0 ,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {22,21,4 ,8 ,7 , 10,5 ,16,9 ,2 , 24,14,25,3 ,23, 1 ,18,19,20,13, 12,11,6 ,15,17,},
                {16,9 ,2 ,10,5 , 24,14,25,3 ,23, 13,1 ,18,19,20, 11,6 ,15,17,12, 8 ,7 ,22,21,4 ,},
                {25,3 ,23,24,14, 13,1 ,18,19,20, 12,11,6 ,15,17, 7 ,22,21,4 ,8 , 10,5 ,16,9 ,2 ,},
                {18,19,20,13,1 , 12,11,6 ,15,17, 8 ,7 ,22,21,4 , 5 ,16,9 ,2 ,10, 24,14,25,3 ,23,},
                {6 ,15,17,12,11, 8 ,7 ,22,21,4 , 10,5 ,16,9 ,2 , 14,25,3 ,23,24, 13,1 ,18,19,20,},

                {21,4 ,8 ,7 ,16, 5 ,25,9 ,2 ,10, 14,18,3 ,23,24, 6 ,19,20,13,1 , 11,22,15,17,12,},
                {9 ,2 ,10,5 ,25, 14,18,3 ,23,24, 1 ,6 ,19,20,13, 22,15,17,12,11, 7 ,16,21,4 ,8 ,},
                {3 ,23,24,14,18, 1 ,6 ,19,20,13, 11,22,15,17,12, 16,21,4 ,8 ,7 , 5 ,25,9 ,2 ,10,},
                {19,20,13,1 ,6 , 11,22,15,17,12, 7 ,16,21,4 ,8 , 25,9 ,2 ,10,5 , 14,18,3 ,23,24,},
                {15,17,12,11,22, 7 ,16,21,4 ,8 , 5 ,25,9 ,2 ,10, 18,3 ,23,24,14, 1 ,6 ,19,20,13,},

                {20,13,1 ,6 ,15, 22,21,17,12,11, 16,9 ,4 ,8 ,7 , 3 ,2 ,10,5 ,25, 18,19,23,24,14,},
                {17,12,11,22,21, 16,9 ,4 ,8 ,7 , 25,3 ,2 ,10,5 , 19,23,24,14,18, 6 ,15,20,13,1 ,},
                {4 ,8 ,7 ,16,9 , 25,3 ,2 ,10,5 , 18,19,23,24,14, 15,20,13,1 ,6 , 22,21,17,12,11,},
                {2 ,10,5 ,25,3 , 18,19,23,24,14, 6 ,15,20,13,1 , 21,17,12,11,22, 16,9 ,4 ,8 ,7 ,},
                {23,24,14,18,19, 6 ,15,20,13,1 , 22,21,17,12,11, 9 ,4 ,8 ,7 ,16, 25,3 ,2 ,10,5 ,},

                {10,5 ,25,3 ,23, 19,20,24,14,18, 15,17,13,1 ,6 , 4 ,12,11,22,21, 9 ,2 ,8 ,7 ,16,},
                {24,14,18,19,20, 15,17,13,1 ,6 , 21,4 ,12,11,22, 2 ,8 ,7 ,16,9 , 3 ,23,10,5 ,25,},
                {13,1 ,6 ,15,17, 21,4 ,12,11,22, 9 ,2 ,8 ,7 ,16, 23,10,5 ,25,3 , 19,20,24,14,18,},
                {12,11,22,21,4 , 9 ,2 ,8 ,7 ,16, 3 ,23,10,5 ,25, 20,24,14,18,19, 15,17,13,1 ,6 ,},
                {8 ,7 ,16,9 ,2 , 3 ,23,10,5 ,25, 19,20,24,14,18, 17,13,1 ,6 ,15, 21,4 ,12,11,22,},

                {7 ,16,9 ,2 ,10, 23,24,5 ,25,3 , 20,13,14,18,19, 12,1 ,6 ,15,17, 4 ,8 ,11,22,21,},
                {5 ,25,3 ,23,24, 20,13,14,18,19, 17,12,1 ,6 ,15, 8 ,11,22,21,4 , 2 ,10,7 ,16,9 ,},
                {14,18,19,20,13, 17,12,1 ,6 ,15, 4 ,8 ,11,22,21, 10,7 ,16,9 ,2 , 23,24,5 ,25,3 ,},
                {1 ,6 ,15,17,12, 4 ,8 ,11,22,21, 2 ,10,7 ,16,9 , 24,5 ,25,3 ,23, 20,13,14,18,19,},
                {11,22,21,4 ,8 , 2 ,10,7 ,16,9 , 23,24,5 ,25,3 , 13,14,18,19,20, 17,12,1 ,6 ,15,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }
}
