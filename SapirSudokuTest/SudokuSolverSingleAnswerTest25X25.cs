using SapirSudoku.src;

namespace SapirSudokuTest;

[TestClass]
public sealed class SudokuSolverSingleAnswerTest25X25
{
    [TestMethod]
    public void Should_SolveSudoku_When_GotA25X25ValidSudoku1()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {0 ,21,4 ,8 ,7 , 10,0 ,0 ,9 ,2 , 0 ,0 ,25,3 ,0 , 0 ,0 ,0 ,0 ,13, 12,11,0 ,15,0 ,},
                {0 ,9 ,0 ,10,5 , 0 ,14,0 ,0 ,23, 13,1 ,18,0 ,0 , 11,6 ,0 ,17,12, 8 ,7 ,22,21,0 ,},
                {0 ,3 ,0 ,0 ,0 , 13,1 ,18,19,0 , 0 ,11,0 ,15,0 , 7 ,0 ,0 ,0 ,8 , 10,5 ,16,9 ,2 ,},
                {0 ,0 ,20,13,1 , 12,0 ,0 ,15,0 , 8 ,0 ,22,21,4 , 5 ,0 ,9 ,2 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {6 ,15,17,0 ,11, 8 ,0 ,22,21,4 , 0 ,0 ,0 ,9 ,2 , 14,25,0 ,23,0 , 0 ,1 ,0 ,19,0 ,},

                {21,4 ,8 ,7 ,0 , 5 ,25,0 ,0 ,0 , 0 ,0 ,3 ,23,0 , 0 ,0 ,0 ,0 ,1 , 0 ,0 ,15,0 ,12,},
                {9 ,0 ,10,0 ,25, 14,18,3 ,0 ,24, 1 ,0 ,19,0 ,0 , 22,0 ,0 ,12,11, 0 ,0 ,21,4 ,0 ,},
                {0 ,0 ,24,14,18, 1 ,0 ,0 ,0 ,13, 0 ,0 ,0 ,0 ,12, 16,21,4 ,0 ,7 , 5 ,25,9 ,2 ,10,},
                {19,20,13,0 ,6 , 0 ,22,15,17,0 , 7 ,16,21,4 ,0 , 25,0 ,0 ,10,5 , 0 ,18,3 ,0 ,24,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,25,0 ,2 ,10, 18,0 ,23,24,14, 1 ,0 ,0 ,0 ,0 ,},

                {20,13,0 ,0 ,0 , 0 ,0 ,17,0 ,0 , 16,9 ,4 ,0 ,7 , 0 ,0 ,0 ,0 ,25, 0 ,0 ,23,24,14,},
                {17,0 ,0 ,22,21, 0 ,0 ,4 ,8 ,7 , 0 ,3 ,0 ,10,5 , 19,0 ,24,0 ,0 , 6 ,0 ,0 ,13,0 ,},
                {0 ,0 ,0 ,0 ,9 , 0 ,3 ,0 ,10,0 , 0 ,19,0 ,0 ,0 , 15,0 ,0 ,0 ,6 , 0 ,0 ,0 ,12,11,},
                {2 ,10,5 ,25,0 , 18,0 ,0 ,0 ,14, 6 ,15,0 ,13,1 , 21,17,12,11,0 , 16,9 ,0 ,0 ,0 ,},
                {23,0 ,14,18,0 , 6 ,0 ,20,0 ,1 , 22,21,17,12,11, 9 ,4 ,8 ,7 ,0 , 0 ,0 ,2 ,10,0 ,},

                {10,5 ,0 ,0 ,0 , 19,20,0 ,0 ,18, 15,17,13,0 ,0 , 4 ,12,0 ,22,0 , 9 ,2 ,8 ,7 ,0 ,},
                {24,0 ,18,19,0 , 0 ,17,0 ,1 ,0 , 0 ,4 ,0 ,11,0 , 2 ,8 ,0 ,0 ,9 , 3 ,0 ,10,5 ,0 ,},
                {13,1 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,2 ,0 ,0 ,16, 0 ,10,0 ,25,3 , 19,20,24,14,0 ,},
                {0 ,0 ,22,21,4 , 0 ,0 ,8 ,7 ,0 , 3 ,0 ,10,0 ,0 , 0 ,0 ,0 ,0 ,19, 0 ,17,13,1 ,0 ,},
                {8 ,7 ,0 ,9 ,2 , 3 ,0 ,10,0 ,25, 19,0 ,0 ,14,18, 17,13,0 ,6 ,0 , 0 ,0 ,12,0 ,0 ,},

                {7 ,0 ,9 ,0 ,10, 23,24,5 ,25,0 , 20,0 ,14,18,0 , 0 ,1 ,6 ,0 ,17, 0 ,8 ,11,22,0 ,},
                {5 ,25,0 ,0 ,24, 0 ,0 ,14,0 ,0 , 17,0 ,0 ,6 ,0 , 8 ,0 ,22,21,0 , 0 ,10,0 ,0 ,0 ,},
                {14,0 ,0 ,0 ,13, 17,0 ,0 ,0 ,0 , 4 ,8 ,11,0 ,21, 0 ,0 ,0 ,0 ,2 , 23,0 ,0 ,0 ,0 ,},
                {0 ,6 ,15,17,0 , 0 ,0 ,11,22,21, 2 ,10,7 ,16,9 , 0 ,5 ,25,3 ,23, 0 ,0 ,0 ,0 ,0 ,},
                {0 ,22,21,4 ,0 , 2 ,10,0 ,16,9 , 0 ,24,0 ,0 ,3 , 0 ,0 ,0 ,19,20, 17,12,1 ,0 ,0 ,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {22,21,4 ,8 ,7 , 10,5 ,16,9 ,2 , 24,14,25,3 ,23, 1 ,18,19,20,13, 12,11,6 ,15,17,},
                {16,9 ,2 ,10,5 , 24,14,25,3 ,23, 13,1 ,18,19,20, 11,6 ,15,17,12, 8 ,7 ,22,21,4 ,},
                {25,3 ,23,24,14, 13,1 ,18,19,20, 12,11,6 ,15,17, 7 ,22,21,4 ,8 , 10,5 ,16,9 ,2 ,},
                {18,19,20,13,1 , 12,11,6 ,15,17, 8 ,7 ,22,21,4 , 5 ,16,9 ,2 ,10, 24,14,25,3 ,23,},
                {6 ,15,17,12,11, 8 ,7 ,22,21,4 , 10,5 ,16,9 ,2 , 14,25,3 ,23,24, 13,1 ,18,19,20,},

                {21,4 ,8 ,7 ,16, 5 ,25,9 ,2 ,10, 14,18,3 ,23,24, 6 ,19,20,13,1 , 11,22,15,17,12,},
                {9 ,2 ,10,5 ,25, 14,18,3 ,23,24, 1 ,6 ,19,20,13, 22,15,17,12,11, 7 ,16,21,4 ,8 ,},
                {3 ,23,24,14,18, 1 ,6 ,19,20,13, 11,22,15,17,12, 16,21,4 ,8 ,7 , 5 ,25,9 ,2 ,10,},
                {19,20,13,1 ,6 , 11,22,15,17,12, 7 ,16,21,4 ,8 , 25,9 ,2 ,10,5 , 14,18,3 ,23,24,},
                {15,17,12,11,22, 7 ,16,21,4 ,8 , 5 ,25,9 ,2 ,10, 18,3 ,23,24,14, 1 ,6 ,19,20,13,},

                {20,13,1 ,6 ,15, 22,21,17,12,11, 16,9 ,4 ,8 ,7 , 3 ,2 ,10,5 ,25, 18,19,23,24,14,},
                {17,12,11,22,21, 16,9 ,4 ,8 ,7 , 25,3 ,2 ,10,5 , 19,23,24,14,18, 6 ,15,20,13,1 ,},
                {4 ,8 ,7 ,16,9 , 25,3 ,2 ,10,5 , 18,19,23,24,14, 15,20,13,1 ,6 , 22,21,17,12,11,},
                {2 ,10,5 ,25,3 , 18,19,23,24,14, 6 ,15,20,13,1 , 21,17,12,11,22, 16,9 ,4 ,8 ,7 ,},
                {23,24,14,18,19, 6 ,15,20,13,1 , 22,21,17,12,11, 9 ,4 ,8 ,7 ,16, 25,3 ,2 ,10,5 ,},

                {10,5 ,25,3 ,23, 19,20,24,14,18, 15,17,13,1 ,6 , 4 ,12,11,22,21, 9 ,2 ,8 ,7 ,16,},
                {24,14,18,19,20, 15,17,13,1 ,6 , 21,4 ,12,11,22, 2 ,8 ,7 ,16,9 , 3 ,23,10,5 ,25,},
                {13,1 ,6 ,15,17, 21,4 ,12,11,22, 9 ,2 ,8 ,7 ,16, 23,10,5 ,25,3 , 19,20,24,14,18,},
                {12,11,22,21,4 , 9 ,2 ,8 ,7 ,16, 3 ,23,10,5 ,25, 20,24,14,18,19, 15,17,13,1 ,6 ,},
                {8 ,7 ,16,9 ,2 , 3 ,23,10,5 ,25, 19,20,24,14,18, 17,13,1 ,6 ,15, 21,4 ,12,11,22,},

                {7 ,16,9 ,2 ,10, 23,24,5 ,25,3 , 20,13,14,18,19, 12,1 ,6 ,15,17, 4 ,8 ,11,22,21,},
                {5 ,25,3 ,23,24, 20,13,14,18,19, 17,12,1 ,6 ,15, 8 ,11,22,21,4 , 2 ,10,7 ,16,9 ,},
                {14,18,19,20,13, 17,12,1 ,6 ,15, 4 ,8 ,11,22,21, 10,7 ,16,9 ,2 , 23,24,5 ,25,3 ,},
                {1 ,6 ,15,17,12, 4 ,8 ,11,22,21, 2 ,10,7 ,16,9 , 24,5 ,25,3 ,23, 20,13,14,18,19,},
                {11,22,21,4 ,8 , 2 ,10,7 ,16,9 , 23,24,5 ,25,3 , 13,14,18,19,20, 17,12,1 ,6 ,15,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }

    [TestMethod]
    public void Should_SolveSudoku_When_GotA25X25ValidSudoku2()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {0 ,0 ,12,6 ,0 , 0 ,7 ,0 ,18,0 , 5 ,24,0 ,10,1 , 0 ,0 ,4 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,},
                {2 ,0 ,19,0 ,13, 0 ,0 ,0 ,10,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,18,5 ,0 , 0 ,0 ,0 ,0 ,1 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,22,0 ,0 , 0 ,0 ,3 ,0 ,2 , 0 ,0 ,14,12,0 , 16,8 ,25,0 ,0 ,},
                {0 ,16,0 ,0 ,0 , 2 ,23,0 ,0 ,13, 12,22,0 ,0 ,0 , 21,15,19,3 ,0 , 0 ,0 ,0 ,14,0 ,},
                {23,0 ,24,0 ,0 , 0 ,0 ,0 ,25,8 , 4 ,0 ,16,19,21, 0 ,0 ,7 ,0 ,0 , 0 ,3 ,12,0 ,9 ,},

                {0 ,4 ,0 ,2 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,10,0 ,24,12, 17,16,0 ,0 ,0 , 5 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,9 ,0 ,0 , 6 ,25,0 ,0 ,0 , 8 ,0 ,5 ,3 ,0 , 0 ,0 ,0 ,0 ,0 , 20,0 ,0 ,18,19,},
                {15,0 ,10,11,0 , 0 ,0 ,18,12,19, 0 ,0 ,0 ,0 ,0 , 0 ,0 ,23,0 ,0 , 7 ,0 ,0 ,4 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,14,0 ,22, 0 ,0 ,18,16,20, 0 ,6 ,11,13,0 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,22,0 ,25,0 , 0 ,1 ,17,5 ,4 , 7 ,0 ,0 ,14,0 , 8 ,3 ,21,0 ,0 , 11,0 ,0 ,0 ,6 ,},

                {0 ,20,13,15,0 , 0 ,0 ,0 ,0 ,0 , 9 ,0 ,0 ,2 ,0 , 25,0 ,1 ,8 ,0 , 0 ,5 ,0 ,21,0 ,},
                {0 ,1 ,0 ,0 ,0 , 0 ,16,10,0 ,7 , 0 ,0 ,4 ,20,0 , 0 ,9 ,0 ,0 ,14, 0 ,24,0 ,17,0 ,},
                {25,2 ,5 ,0 ,0 , 0 ,0 ,0 ,13,0 , 0 ,0 ,0 ,0 ,22, 0 ,0 ,0 ,0 ,0 , 19,1 ,8 ,0 ,0 ,},
                {0 ,0 ,7 ,21,0 , 0 ,12,0 ,2 ,17, 0 ,0 ,0 ,18,6 , 16,0 ,0 ,15,0 , 0 ,13,0 ,10,0 ,},
                {8 ,10,18,12,16, 9 ,0 ,0 ,0 ,5 , 0 ,0 ,0 ,0 ,19, 0 ,0 ,17,0 ,21, 0 ,15,0 ,0 ,22,},

                {0 ,8 ,0 ,0 ,15, 0 ,3 ,0 ,6 ,0 , 21,0 ,0 ,7 ,0 , 18,14,5 ,0 ,1 , 0 ,0 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,19,0 , 1 ,0 ,16,11,0 , 0 ,0 ,10,22,25, 15,0 ,0 ,0 ,0 , 0 ,0 ,21,0 ,0 ,},
                {0 ,3 ,1 ,0 ,21, 0 ,0 ,4 ,0 ,0 , 0 ,0 ,2 ,0 ,13, 0 ,24,25,0 ,0 , 14,0 ,0 ,6 ,0 ,},
                {0 ,0 ,0 ,0 ,0 , 0 ,0 ,15,0 ,12, 14,0 ,6 ,17,24, 0 ,0 ,0 ,0 ,0 , 0 ,0 ,13,0 ,0 ,},
                {0 ,5 ,23,16,4 , 0 ,13,24,7 ,2 , 0 ,9 ,0 ,0 ,15, 3 ,0 ,22,0 ,0 , 0 ,0 ,0 ,0 ,8 ,},

                {0 ,0 ,25,20,2 , 0 ,19,0 ,0 ,0 , 0 ,1 ,0 ,0 ,0 , 0 ,21,3 ,0 ,0 , 12,0 ,0 ,0 ,0 ,},
                {16,12,0 ,5 ,0 , 11,21,0 ,23,0 , 0 ,15,0 ,0 ,0 , 0 ,19,9 ,0 ,0 , 0 ,0 ,0 ,25,10,},
                {0 ,0 ,0 ,0 ,9 , 20,22,7 ,4 ,0 , 3 ,0 ,14,25,18, 0 ,11,0 ,0 ,0 , 0 ,0 ,1 ,0 ,15,},
                {24,0 ,6 ,0 ,22, 8 ,0 ,25,14,0 , 10,11,0 ,9 ,0 , 20,1 ,16,0 ,7 , 0 ,23,0 ,0 ,13,},
                {14,13,21,1 ,0 , 0 ,5 ,0 ,0 ,0 , 6 ,0 ,22,0 ,23, 10,0 ,0 ,0 ,2 , 0 ,0 ,18,7 ,11,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {3 ,14,12,6 ,25, 19,7 ,21,18,16, 5 ,24,9 ,10,1 , 13,23,4 ,20,8 , 22,11,17,15,2 ,},
                {2 ,9 ,19,8 ,13, 12,20,3 ,10,11, 17,7 ,23,15,14, 22,25,18,5 ,16, 4 ,21,6 ,24,1 ,},
                {21,18,15,7 ,5 , 4 ,6 ,22,17,1 , 13,20,3 ,11,2 , 24,10,14,12,9 , 16,8 ,25,19,23,},
                {1 ,16,11,4 ,20, 2 ,23,9 ,24,13, 12,22,25,6 ,8 , 21,15,19,3 ,17, 10,7 ,5 ,14,18,},
                {23,17,24,22,10, 15,14,5 ,25,8 , 4 ,18,16,19,21, 6 ,2 ,7 ,1 ,11, 13,3 ,12,20,9 ,},

                {18,4 ,3 ,2 ,6 , 13,11,8 ,20,23, 19,10,21,24,12, 17,16,15,7 ,25, 5 ,9 ,22,1 ,14,},
                {13,7 ,9 ,14,23, 6 ,25,2 ,15,21, 8 ,4 ,5 ,3 ,11, 1 ,12,10,22,24, 20,17,16,18,19,},
                {15,21,10,11,8 , 16,9 ,18,12,19, 22,6 ,13,1 ,17, 2 ,5 ,23,14,20, 7 ,25,3 ,4 ,24,},
                {5 ,19,17,24,1 , 7 ,10,14,3 ,22, 23,25,18,16,20, 9 ,6 ,11,13,4 , 15,12,2 ,8 ,21,},
                {20,22,16,25,12, 24,1 ,17,5 ,4 , 7 ,2 ,15,14,9 , 8 ,3 ,21,19,18, 11,10,23,13,6 ,},

                {4 ,20,13,15,17, 3 ,24,23,22,14, 9 ,12,11,2 ,10, 25,18,1 ,8 ,19, 6 ,5 ,7 ,21,16,},
                {6 ,1 ,22,23,19, 21,16,10,8 ,7 , 15,13,4 ,20,3 , 5 ,9 ,12,2 ,14, 18,24,11,17,25,},
                {25,2 ,5 ,3 ,14, 18,15,11,13,20, 16,17,24,21,22, 4 ,7 ,6 ,10,23, 19,1 ,8 ,9 ,12,},
                {9 ,24,7 ,21,11, 25,12,19,2 ,17, 1 ,5 ,8 ,18,6 , 16,22,20,15,3 , 23,13,14,10,4 ,},
                {8 ,10,18,12,16, 9 ,4 ,6 ,1 ,5 , 25,14,7 ,23,19, 11,13,17,24,21, 3 ,15,20,2 ,22,},

                {10,8 ,2 ,13,15, 22,3 ,20,6 ,25, 21,23,19,7 ,4 , 18,14,5 ,11,1 , 24,16,9 ,12,17,},
                {12,6 ,14,19,24, 1 ,18,16,11,9 , 20,3 ,10,22,25, 15,17,8 ,23,13, 2 ,4 ,21,5 ,7 ,},
                {22,3 ,1 ,9 ,21, 23,17,4 ,19,10, 11,8 ,2 ,5 ,13, 7 ,24,25,16,12, 14,18,15,6 ,20,},
                {11,25,20,18,7 , 5 ,8 ,15,21,12, 14,16,6 ,17,24, 19,4 ,2 ,9 ,10, 1 ,22,13,23,3 ,},
                {17,5 ,23,16,4 , 14,13,24,7 ,2 , 18,9 ,1 ,12,15, 3 ,20,22,21,6 , 25,19,10,11,8 ,},

                {7 ,11,25,20,2 , 10,19,13,9 ,6 , 24,1 ,17,8 ,16, 23,21,3 ,18,15, 12,14,4 ,22,5 ,},
                {16,12,4 ,5 ,18, 11,21,1 ,23,3 , 2 ,15,20,13,7 , 14,19,9 ,17,22, 8 ,6 ,24,25,10,},
                {19,23,8 ,10,9 , 20,22,7 ,4 ,24, 3 ,21,14,25,18, 12,11,13,6 ,5 , 17,2 ,1 ,16,15,},
                {24,15,6 ,17,22, 8 ,2 ,25,14,18, 10,11,12,9 ,5 , 20,1 ,16,4 ,7 , 21,23,19,3 ,13,},
                {14,13,21,1 ,3 , 17,5 ,12,16,15, 6 ,19,22,4 ,23, 10,8 ,24,25,2 , 9 ,20,18,7 ,11,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }
}
