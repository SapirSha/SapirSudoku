using SapirSudoku.src;

namespace SapirSudokuTest;

[TestClass]
public sealed class SudokuSolverSingleAnswerTest16X16
{
    [TestMethod]
    public void Should_SolveSudoku_When_GotA16X16ValidSudoku1()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {1 ,0 ,0 ,2 , 3 ,4 ,0 ,0 , 12,0 ,6 ,0 , 0 ,0 ,7 ,0 ,},
                {0 ,0 ,8 ,0 , 0 ,0 ,7 ,0 , 0 ,3 ,0 ,0 , 9 ,10,6 ,11,},
                {0 ,12,0 ,0 , 10,0 ,0 ,1 , 0 ,13,0 ,11, 0 ,0 ,14,0 ,},
                {3 ,0 ,0 ,15, 2 ,0 ,0 ,14, 0 ,0 ,0 ,9 , 0 ,0 ,12,0 ,},

                {13,0 ,0 ,0 , 8 ,0 ,0 ,10, 0 ,12,2 ,0 , 1 ,15,0 ,0 ,},
                {0 ,11,7 ,6 , 0 ,0 ,0 ,16, 0 ,0 ,0 ,15, 0 ,0 ,5 ,13,},
                {0 ,0 ,0 ,10, 0 ,5 ,15,0 , 0 ,4 ,0 ,8 , 0 ,0 ,11,0 ,},
                {16,0 ,0 ,5 , 9 ,12,0 ,0 , 1 ,0 ,0 ,0 , 0 ,0 ,8 ,0 ,},

                {0 ,2 ,0 ,0 , 0 ,0 ,0 ,13, 0 ,0 ,12,5 , 8 ,0 ,0 ,3 ,},
                {0 ,13,0 ,0 , 15,0 ,3 ,0 , 0 ,14,8 ,0 , 16,0 ,0 ,0 ,},
                {5 ,8 ,0 ,0 , 1 ,0 ,0 ,0 , 2 ,0 ,0 ,0 , 13,9 ,15,0 ,},
                {0 ,0 ,12,4 , 0 ,6 ,16,0 , 13,0 ,0 ,7 , 0 ,0 ,0 ,5 ,},

                {0 ,3 ,0 ,0 , 12,0 ,0 ,0 , 6 ,0 ,0 ,4 , 11,0 ,0 ,16,},
                {0 ,7 ,0 ,0 , 16,0 ,5 ,0 , 14,0 ,0 ,1 , 0 ,0 ,2 ,0 ,},
                {11,1 ,15,9 , 0 ,0 ,13,0 , 0 ,2 ,0 ,0 , 0 ,14,0 ,0 ,},
                {0 ,14,0 ,0 , 0 ,11,0 ,2 , 0 ,0 ,13,3 , 5 ,0 ,0 ,12,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {1 ,5 ,10,2 , 3 ,4 ,9 ,11, 12,16,6 ,14, 15,13,7 ,8 ,},
                {14,16,8 ,13, 5 ,15,7 ,12, 4 ,3 ,1 ,2 , 9 ,10,6 ,11,},
                {9 ,12,4 ,7 , 10,16,6 ,1 , 8 ,13,15,11, 3 ,5 ,14,2 ,},
                {3 ,6 ,11,15, 2 ,13,8 ,14, 7 ,5 ,10,9 , 4 ,16,12,1 ,},

                {13,4 ,14,3 , 8 ,7 ,11,10, 5 ,12,2 ,6 , 1 ,15,16,9 ,},
                {8 ,11,7 ,6 , 4 ,1 ,2 ,16, 9 ,10,14,15, 12,3 ,5 ,13,},
                {12,9 ,1 ,10, 13,5 ,15,6 , 3 ,4 ,16,8 , 14,2 ,11,7 ,},
                {16,15,2 ,5 , 9 ,12,14,3 , 1 ,11,7 ,13, 10,6 ,8 ,4 ,},

                {6 ,2 ,16,14, 11,9 ,4 ,13, 15,1 ,12,5 , 8 ,7 ,10,3 ,},
                {7 ,13,9 ,1 , 15,2 ,3 ,5 , 11,14,8 ,10, 16,12,4 ,6 ,},
                {5 ,8 ,3 ,11, 1 ,10,12,7 , 2 ,6 ,4 ,16, 13,9 ,15,14,},
                {15,10,12,4 , 14,6 ,16,8 , 13,9 ,3 ,7 , 2 ,11,1 ,5 ,},

                {2 ,3 ,5 ,8 , 12,14,10,15, 6 ,7 ,9 ,4 , 11,1 ,13,16,},
                {10,7 ,13,12, 16,3 ,5 ,9 , 14,8 ,11,1 , 6 ,4 ,2 ,15,},
                {11,1 ,15,9 , 6 ,8 ,13,4 , 16,2 ,5 ,12, 7 ,14,3 ,10,},
                {4 ,14,6 ,16, 7 ,11,1 ,2 , 10,15,13,3 , 5 ,8 ,9 ,12,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }

    [TestMethod]
    public void Should_SolveSudoku_When_GotA16X16ValidSudoku2()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {14,0 ,0 ,0 , 15,0 ,0 ,6 , 11,0 ,0 ,13, 2 ,0 ,0 ,0 ,},
                {0 ,16,0 ,0 , 0 ,0 ,9 ,0 , 7 ,0 ,0 ,10, 0 ,3 ,0 ,0 ,},
                {3 ,0 ,0 ,11, 0 ,8 ,0 ,0 , 0 ,0 ,0 ,9 , 6 ,15,0 ,0 ,},
                {6 ,0 ,0 ,0 , 0 ,13,11,3 , 0 ,0 ,0 ,0 , 0 ,0 ,12,9 ,},

                {0 ,14,4 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,3 ,0 , 0 ,0 ,0 ,0 ,},
                {8 ,2 ,0 ,0 , 0 ,4 ,12,0 , 0 ,7 ,6 ,0 , 0 ,0 ,0 ,5 ,},
                {11,3 ,0 ,0 , 16,0 ,0 ,2 , 0 ,14,4 ,0 , 7 ,6 ,0 ,10,},
                {7 ,0 ,0 ,10, 0 ,5 ,13,0 , 8 ,0 ,0 ,0 , 9 ,0 ,0 ,0 ,},

                {0 ,7 ,6 ,15, 0 ,0 ,5 ,0 , 0 ,8 ,2 ,0 , 12,0 ,0 ,0 ,},
                {0 ,9 ,0 ,0 , 0 ,0 ,0 ,10, 0 ,13,0 ,3 , 0 ,8 ,0 ,0 ,},
                {0 ,0 ,2 ,0 , 9 ,14,4 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,11,3 ,},
                {0 ,11,0 ,0 , 2 ,16,0 ,0 , 12,0 ,14,0 , 10,7 ,0 ,0 ,},

                {16,0 ,0 ,2 , 12,0 ,0 ,0 , 0 ,15,0 ,0 , 0 ,0 ,13,0 ,},
                {5 ,0 ,0 ,0 , 0 ,0 ,16,0 , 4 ,0 ,9 ,0 , 0 ,10,0 ,0 ,},
                {0 ,0 ,0 ,6 , 0 ,0 ,3 ,5 , 0 ,1 ,8 ,2 , 0 ,0 ,0 ,14,},
                {0 ,0 ,9 ,0 , 10,7 ,0 ,0 , 3 ,0 ,0 ,11, 0 ,1 ,8 ,0 ,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {14,4 ,12,9 , 15,10,7 ,6 , 11,3 ,5 ,13, 2 ,16,1 ,8 ,},
                {2 ,16,1 ,8 , 4 ,12,9 ,14, 7 ,6 ,15,10, 11,3 ,5 ,13,},
                {3 ,5 ,13,11, 1 ,8 ,2 ,16, 14,4 ,12,9 , 6 ,15,10,7 ,},
                {6 ,15,10,7 , 5 ,13,11,3 , 2 ,16,1 ,8 , 14,4 ,12,9 ,},

                {9 ,14,4 ,12, 6 ,15,10,7 , 13,11,3 ,5 , 8 ,2 ,16,1 ,},
                {8 ,2 ,16,1 , 14,4 ,12,9 , 10,7 ,6 ,15, 13,11,3 ,5 ,},
                {11,3 ,5 ,13, 16,1 ,8 ,2 , 9 ,14,4 ,12, 7 ,6 ,15,10,},
                {7 ,6 ,15,10, 3 ,5 ,13,11, 8 ,2 ,16,1 , 9 ,14,4 ,12,},

                {10,7 ,6 ,15, 11,3 ,5 ,13, 1 ,8 ,2 ,16, 12,9 ,14,4 ,},
                {12,9 ,14,4 , 7 ,6 ,15,10, 5 ,13,11,3 , 1 ,8 ,2 ,16,},
                {1 ,8 ,2 ,16, 9 ,14,4 ,12, 15,10,7 ,6 , 5 ,13,11,3 ,},
                {13,11,3 ,5 , 2 ,16,1 ,8 , 12,9 ,14,4 , 10,7 ,6 ,15,},

                {16,1 ,8 ,2 , 12,9 ,14,4 , 6 ,15,10,7 , 3 ,5 ,13,11,},
                {5 ,13,11,3 , 8 ,2 ,16,1 , 4 ,12,9 ,14, 15,10,7 ,6 ,},
                {15,10,7 ,6 , 13,11,3 ,5 , 16,1 ,8 ,2 , 4 ,12,9 ,14,},
                {4 ,12,9 ,14, 10,7 ,6 ,15, 3 ,5 ,13,11, 16,1 ,8 ,2 ,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }

    [TestMethod]
    public void Should_SolveSudoku_When_GotA16X16ValidSudoku3()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {0 ,0 ,0 ,0 , 10,13,0 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,15,},
                {7 ,0 ,0 ,5 , 0 ,11,0 ,1 , 10,0 ,0 ,16, 9 ,0 ,12,8 ,},
                {9 ,0 ,0 ,8 , 0 ,0 ,7 ,0 , 0 ,0 ,0 ,4 , 6 ,0 ,0 ,13,},
                {6 ,0 ,10,13, 0 ,8 ,0 ,0 , 0 ,0 ,0 ,7 , 0 ,0 ,0 ,2 ,},

                {13,0 ,0 ,0 , 3 ,0 ,8 ,9 , 0 ,14,15,5 , 0 ,0 ,0 ,1 ,},
                {2 ,11,0 ,1 , 16,10,0 ,0 , 0 ,0 ,0 ,8 , 0 ,0 ,7 ,14,},
                {0 ,0 ,0 ,0 , 1 ,0 ,0 ,0 , 16,0 ,0 ,0 , 0 ,9 ,0 ,0 ,},
                {0 ,0 ,0 ,12, 14,15,0 ,7 , 4 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},

                {0 ,0 ,6 ,16, 9 ,0 ,0 ,0 , 0 ,0 ,14,0 , 1 ,0 ,0 ,0 ,},
                {0 ,2 ,11,0 , 6 ,0 ,0 ,13, 8 ,0 ,0 ,12, 0 ,0 ,5 ,0 ,},
                {0 ,0 ,7 ,0 , 0 ,0 ,2 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},
                {12,0 ,9 ,0 , 0 ,14,15,5 , 11,4 ,0 ,2 , 0 ,13,0 ,16,},

                {0 ,0 ,2 ,0 , 13,0 ,16,0 , 12,0 ,9 ,0 , 7 ,0 ,0 ,0 ,},
                {14,15,5 ,0 , 0 ,4 ,0 ,0 , 13,6 ,0 ,0 , 0 ,12,8 ,0 ,},
                {3 ,12,0 ,0 , 0 ,0 ,0 ,0 , 2 ,0 ,0 ,1 , 16,10,0 ,0 ,},
                {0 ,0 ,13,6 , 8 ,0 ,0 ,0 , 15,0 ,0 ,0 , 4 ,0 ,2 ,0 ,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {11,4 ,1 ,2 , 10,13,6 ,16, 3 ,12,8 ,9 , 5 ,7 ,14,15,},
                {7 ,14,15,5 , 2 ,11,4 ,1 , 10,13,6 ,16, 9 ,3 ,12,8 ,},
                {9 ,3 ,12,8 , 15,5 ,7 ,14, 1 ,2 ,11,4 , 6 ,16,10,13,},
                {6 ,16,10,13, 12,8 ,9 ,3 , 14,15,5 ,7 , 11,4 ,1 ,2 ,},

                {13,6 ,16,10, 3 ,12,8 ,9 , 7 ,14,15,5 , 2 ,11,4 ,1 ,},
                {2 ,11,4 ,1 , 16,10,13,6 , 9 ,3 ,12,8 , 15,5 ,7 ,14,},
                {5 ,7 ,14,15, 1 ,2 ,11,4 , 16,10,13,6 , 8 ,9 ,3 ,12,},
                {8 ,9 ,3 ,12, 14,15,5 ,7 , 4 ,1 ,2 ,11, 13,6 ,16,10,},

                {10,13,6 ,16, 9 ,3 ,12,8 , 5 ,7 ,14,15, 1 ,2 ,11,4 ,},
                {1 ,2 ,11,4 , 6 ,16,10,13, 8 ,9 ,3 ,12, 14,15,5 ,7 ,},
                {15,5 ,7 ,14, 4 ,1 ,2 ,11, 6 ,16,10,13, 12,8 ,9 ,3 ,},
                {12,8 ,9 ,3 , 7 ,14,15,5 , 11,4 ,1 ,2 , 10,13,6 ,16,},

                {4 ,1 ,2 ,11, 13,6 ,16,10, 12,8 ,9 ,3 , 7 ,14,15,5 ,},
                {14,15,5 ,7 , 11,4 ,1 ,2 , 13,6 ,16,10, 3 ,12,8 ,9 ,},
                {3 ,12,8 ,9 , 5 ,7 ,14,15, 2 ,11,4 ,1 , 16,10,13,6 ,},
                {16,10,13,6 , 8 ,9 ,3 ,12, 15,5 ,7 ,14, 4 ,1 ,2 ,11,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }

    [TestMethod]
    public void Should_SolveSudoku_When_GotA16X16ValidSudoku4()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {0 ,3 ,0 ,0 , 0 ,0 ,11,0 , 6 ,2 ,12,0 , 0 ,0 ,16,0 ,},
                {0 ,0 ,1 ,11, 10,6 ,2 ,0 , 16,8 ,0 ,14, 7 ,0 ,0 ,4 ,},
                {0 ,0 ,0 ,2 , 0 ,16,8 ,9 , 0 ,0 ,0 ,3 , 5 ,13,1 ,0 ,},
                {9 ,14,0 ,0 , 3 ,0 ,0 ,0 , 0 ,11,0 ,13, 0 ,0 ,0 ,0 ,},

                {13,0 ,0 ,0 , 6 ,2 ,0 ,0 , 8 ,0 ,0 ,0 , 3 ,15,0 ,5 ,},
                {10,0 ,0 ,0 , 0 ,8 ,0 ,0 , 0 ,0 ,3 ,0 , 0 ,0 ,0 ,12,},
                {0 ,16,0 ,0 , 0 ,4 ,5 ,0 , 11,12,0 ,0 , 0 ,0 ,0 ,9 ,},
                {0 ,15,4 ,5 , 0 ,0 ,0 ,0 , 0 ,9 ,0 ,0 , 14,16,0 ,0 ,},

                {0 ,4 ,0 ,0 , 0 ,12,10,1 , 0 ,14,6 ,0 , 0 ,8 ,7 ,0 ,},
                {0 ,0 ,0 ,0 , 0 ,0 ,0 ,6 , 0 ,0 ,0 ,8 , 0 ,4 ,0 ,13,},
                {0 ,2 ,0 ,0 , 0 ,7 ,0 ,0 , 5 ,0 ,15,0 , 1 ,0 ,12,0 ,},
                {16,8 ,7 ,3 , 0 ,5 ,0 ,15, 0 ,10,0 ,0 , 0 ,2 ,0 ,0 ,},

                {11,12,0 ,6 , 0 ,0 ,0 ,0 , 3 ,0 ,0 ,0 , 0 ,0 ,13,0 ,},
                {2 ,0 ,14,0 , 7 ,0 ,15,0 , 0 ,0 ,0 ,5 , 0 ,0 ,10,6 ,},
                {0 ,0 ,0 ,0 , 5 ,0 ,1 ,0 , 0 ,0 ,11,0 , 2 ,0 ,0 ,0 ,},
                {0 ,0 ,0 ,1 , 0 ,0 ,6 ,11, 0 ,0 ,0 ,9 , 8 ,0 ,3 ,0 ,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {7 ,3 ,15,4 , 13,1 ,11,5 , 6 ,2 ,12,10, 9 ,14,16,8 ,},
                {5 ,13,1 ,11, 10,6 ,2 ,12, 16,8 ,9 ,14, 7 ,3 ,15,4 ,},
                {12,10,6 ,2 , 14,16,8 ,9 , 15,4 ,7 ,3 , 5 ,13,1 ,11,},
                {9 ,14,16,8 , 3 ,15,4 ,7 , 1 ,11,5 ,13, 12,10,6 ,2 ,},

                {13,1 ,11,12, 6 ,2 ,9 ,10, 8 ,7 ,14,16, 3 ,15,4 ,5 ,},
                {10,6 ,2 ,9 , 16,8 ,7 ,14, 4 ,5 ,3 ,15, 13,1 ,11,12,},
                {14,16,8 ,7 , 15,4 ,5 ,3 , 11,12,13,1 , 10,6 ,2 ,9 ,},
                {3 ,15,4 ,5 , 1 ,11,12,13, 2 ,9 ,10,6 , 14,16,8 ,7 ,},

                {15,4 ,5 ,13, 11,12,10,1 , 9 ,14,6 ,2 , 16,8 ,7 ,3 ,},
                {1 ,11,12,10, 2 ,9 ,14,6 , 7 ,3 ,16,8 , 15,4 ,5 ,13,},
                {6 ,2 ,9 ,14, 8 ,7 ,3 ,16, 5 ,13,15,4 , 1 ,11,12,10,},
                {16,8 ,7 ,3 , 4 ,5 ,13,15, 12,10,1 ,11, 6 ,2 ,9 ,14,},

                {11,12,10,6 , 9 ,14,16,2 , 3 ,15,8 ,7 , 4 ,5 ,13,1 ,},
                {2 ,9 ,14,16, 7 ,3 ,15,8 , 13,1 ,4 ,5 , 11,12,10,6 ,},
                {8 ,7 ,3 ,15, 5 ,13,1 ,4 , 10,6 ,11,12, 2 ,9 ,14,16,},
                {4 ,5 ,13,1 , 12,10,6 ,11, 14,16,2 ,9 , 8 ,7 ,3 ,15,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }

    [TestMethod]
    public void Should_SolveSudoku_When_GotA16X16ValidSudoku5()
    {
        Sudoku toSolveSudoku = new Sudoku(
            new int[,]
            {
                {0 ,0 ,0 ,0 , 10,13,0 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,15,},
                {7 ,0 ,0 ,5 , 0 ,11,0 ,1 , 10,0 ,0 ,16, 9 ,0 ,12,8 ,},
                {9 ,0 ,0 ,8 , 0 ,0 ,7 ,0 , 0 ,0 ,0 ,4 , 6 ,0 ,0 ,13,},
                {6 ,0 ,10,13, 0 ,8 ,0 ,0 , 0 ,0 ,0 ,7 , 0 ,0 ,0 ,2 ,},

                {13,0 ,0 ,0 , 3 ,0 ,8 ,9 , 0 ,14,15,5 , 0 ,0 ,0 ,1 ,},
                {2 ,11,0 ,1 , 16,10,0 ,0 , 0 ,0 ,0 ,8 , 0 ,0 ,7 ,14,},
                {0 ,0 ,0 ,0 , 1 ,0 ,0 ,0 , 16,0 ,0 ,0 , 0 ,9 ,0 ,0 ,},
                {0 ,0 ,0 ,12, 14,15,0 ,7 , 4 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},

                {0 ,0 ,6 ,16, 9 ,0 ,0 ,0 , 0 ,0 ,14,0 , 1 ,0 ,0 ,0 ,},
                {0 ,2 ,11,0 , 6 ,0 ,0 ,13, 8 ,0 ,0 ,12, 0 ,0 ,5 ,0 ,},
                {0 ,0 ,7 ,0 , 0 ,0 ,2 ,0 , 0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,},
                {12,0 ,9 ,0 , 0 ,14,15,5 , 11,4 ,0 ,2 , 0 ,13,0 ,16,},

                {0 ,0 ,2 ,0 , 13,0 ,16,0 , 12,0 ,9 ,0 , 7 ,0 ,0 ,0 ,},
                {14,15,5 ,0 , 0 ,4 ,0 ,0 , 13,6 ,0 ,0 , 0 ,12,8 ,0 ,},
                {3 ,12,0 ,0 , 0 ,0 ,0 ,0 , 2 ,0 ,0 ,1 , 16,10,0 ,0 ,},
                {0 ,0 ,13,6 , 8 ,0 ,0 ,0 , 15,0 ,0 ,0 , 4 ,0 ,2 ,0 ,},
            }
        );

        Sudoku expectedSudoku = new Sudoku(
            new int[,]
            {
                {11,4 ,1 ,2 , 10,13,6 ,16, 3 ,12,8 ,9 , 5 ,7 ,14,15,},
                {7 ,14,15,5 , 2 ,11,4 ,1 , 10,13,6 ,16, 9 ,3 ,12,8 ,},
                {9 ,3 ,12,8 , 15,5 ,7 ,14, 1 ,2 ,11,4 , 6 ,16,10,13,},
                {6 ,16,10,13, 12,8 ,9 ,3 , 14,15,5 ,7 , 11,4 ,1 ,2 ,},

                {13,6 ,16,10, 3 ,12,8 ,9 , 7 ,14,15,5 , 2 ,11,4 ,1 ,},
                {2 ,11,4 ,1 , 16,10,13,6 , 9 ,3 ,12,8 , 15,5 ,7 ,14,},
                {5 ,7 ,14,15, 1 ,2 ,11,4 , 16,10,13,6 , 8 ,9 ,3 ,12,},
                {8 ,9 ,3 ,12, 14,15,5 ,7 , 4 ,1 ,2 ,11, 13,6 ,16,10,},

                {10,13,6 ,16, 9 ,3 ,12,8 , 5 ,7 ,14,15, 1 ,2 ,11,4 ,},
                {1 ,2 ,11,4 , 6 ,16,10,13, 8 ,9 ,3 ,12, 14,15,5 ,7 ,},
                {15,5 ,7 ,14, 4 ,1 ,2 ,11, 6 ,16,10,13, 12,8 ,9 ,3 ,},
                {12,8 ,9 ,3 , 7 ,14,15,5 , 11,4 ,1 ,2 , 10,13,6 ,16,},

                {4 ,1 ,2 ,11, 13,6 ,16,10, 12,8 ,9 ,3 , 7 ,14,15,5 ,},
                {14,15,5 ,7 , 11,4 ,1 ,2 , 13,6 ,16,10, 3 ,12,8 ,9 ,},
                {3 ,12,8 ,9 , 5 ,7 ,14,15, 2 ,11,4 ,1 , 16,10,13,6 ,},
                {16,10,13,6 , 8 ,9 ,3 ,12, 15,5 ,7 ,14, 4 ,1 ,2 ,11,},
            }
        );

        IEnumerable<Sudoku> Answers = toSolveSudoku.Answers;
        Assert.IsTrue(Answers.First().Equals(expectedSudoku) && Answers.Count() == 1);
    }
}
